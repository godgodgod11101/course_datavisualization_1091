library(drake)
# If you use git and does not want to track cache folder, put down the following command:
set_gitignore("class2_1007_cache")
library(readr)
library(dplyr)
library(ggplot2)
library(svglite)
dataImport = {
xml2::read_xml("https://www.dgbas.gov.tw/public/data/open/Stat/price/PR0101A1M.xml") -> twcpi
xml2::as_list(twcpi) -> twcpi
}
dataProcessing = {
library(purrr)
map(
twcpi$DataSet,
~{
(.x$Item == "總指數(民國105年=100)") &
(.x$TYPE == "年增率(%)")
}
) %>%
unlist() ->    # change list to vector
pick_105cpi
head(pick_105cpi, 20)
growthCPI <- twcpi$DataSet[pick_105cpi]
map_dfr(    # return a data frame created by row-binding
seq_along(growthCPI),
~{
data.frame(
項目 = growthCPI[[.x]]$Item[[1]],
年月 = growthCPI[[.x]]$TIME_PERIOD[[1]],
年增率 = growthCPI[[.x]]$Item_VALUE[[1]]
)
}
) ->
df_twcpi
rm(growthCPI, pick_105cpi)
df_twcpi$年月日 <-
df_twcpi$年月 %>%
str_replace("M", "-") %>%
paste0("-01") %>%
lubridate::ymd()
df_twcpi$年增率百分比 <- as.numeric(df_twcpi$年增率)
}
baseCanvas = {
df_twcpi %>%
ggplot() ->
baseCanvas
}
View(baseCanvas)
baseCanvas = {
df_twcpi %>%
ggplot()
}
geom1_line = {
baseCanvas +
geom_line(
mapping = aes(
x = 年月日,
y = 年增率百分比
)
)
}
vis_plan_20201007_class2()
mk_plan_20201007_class2()
vis_plan_20201007_class2()
vis_plan_20201007_class2()
knitr::opts_chunk$set(echo = TRUE, eval=F)
library(rmd2drake)
library(drake)
# If you use git and does not want to track cache folder, put down the following command:
set_gitignore("class2_1007_cache")
library(readr)
library(dplyr)
library(ggplot2)
library(svglite)
dataImport = {
xml2::read_xml("https://www.dgbas.gov.tw/public/data/open/Stat/price/PR0101A1M.xml") -> twcpi
xml2::as_list(twcpi)
}
View(dataImport)
dataExtract = {
library(purrr)
map(
dataImport$DataSet,
~{
(.x$Item == "總指數(民國105年=100)") &
(.x$TYPE == "年增率(%)")
}
) %>%
unlist() ->    # change list to vector
pick_105cpi
head(pick_105cpi, 20)
growthCPI <- dataImport$DataSet[pick_105cpi]
map_dfr(    # return a data frame created by row-binding
seq_along(growthCPI),
~{
data.frame(
項目 = growthCPI[[.x]]$Item[[1]],
年月 = growthCPI[[.x]]$TIME_PERIOD[[1]],
年增率 = growthCPI[[.x]]$Item_VALUE[[1]]
)
}
)
rm(growthCPI, pick_105cpi)
}
dataExtract = {
library(purrr)
map(
dataImport$DataSet,
~{
(.x$Item == "總指數(民國105年=100)") &
(.x$TYPE == "年增率(%)")
}
) %>%
unlist() ->    # change list to vector
pick_105cpi
head(pick_105cpi, 20)
growthCPI <- dataImport$DataSet[pick_105cpi]
map_dfr(    # return a data frame created by row-binding
seq_along(growthCPI),
~{
data.frame(
項目 = growthCPI[[.x]]$Item[[1]],
年月 = growthCPI[[.x]]$TIME_PERIOD[[1]],
年增率 = growthCPI[[.x]]$Item_VALUE[[1]]
)
}
)
}
View(dataExtract)
rm(growthCPI, pick_105cpi)
dataProcessing = {
dataExtract %>%
mutate(
年月日 = df_twcpi$年月 %>%
str_replace("M", "-") %>%
paste0("-01") %>%
lubridate::ymd(),
年增率百分比 = as.numeric(df_twcpi$年增率)
)
}
dataProcessing = {
dataExtract %>%
mutate(
年月日 = 年月 %>%
str_replace("M", "-") %>%
paste0("-01") %>%
lubridate::ymd(),
年增率百分比 = as.numeric(年增率)
)
}
View(dataProcessing)
baseCanvas = {
dataProcessing %>%
ggplot()
}
baseCanvas = {
dataProcessing %>%
ggplot()
}
geom1_line = {
baseCanvas +
geom_line(
mapping = aes(
x = 年月日,
y = 年增率百分比
)
)
}
View(pj)
View(pj)
load("~/GitHub/course_datavisualization_1091/.RData")
load("~/GitHub/course_datavisualization_1091/.RData")
View(twcpi)
library(readr)
library(dplyr)
library(ggplot2)
library(svglite)
vis_plan_20201007_class2()
View(plan_20201007_class2)
mk_plan_20201007_class2()
dataImport_twcpi = {
xml2::read_xml("https://www.dgbas.gov.tw/public/data/open/Stat/price/PR0101A1M.xml") %>%
xml2::as_list()
}
dataImport_twcpi = {
xml2::read_xml("https://www.dgbas.gov.tw/public/data/open/Stat/price/PR0101A1M.xml") %>%
xml2::as_list()
}
mk_plan_20201007_class2()
dataImport_twcpi = {
xml2::read_xml("https://www.dgbas.gov.tw/public/data/open/Stat/price/PR0101A1M.xml") %>%
xml2::as_list()
}
View(dataImport_twcpi)
dataExtract = {
library(purrr)
map(
dataImport_twcpi$DataSet,
~{
(.x$Item == "總指數(民國105年=100)") &
(.x$TYPE == "年增率(%)")
}
) %>%
unlist() ->    # change list to vector
pick_105cpi
head(pick_105cpi, 20)
growthCPI <- dataImport_twcpi$DataSet[pick_105cpi]
map_dfr(    # return a data frame created by row-binding
seq_along(growthCPI),
~{
data.frame(
項目 = growthCPI[[.x]]$Item[[1]],
年月 = growthCPI[[.x]]$TIME_PERIOD[[1]],
年增率 = growthCPI[[.x]]$Item_VALUE[[1]]
)
}
)
}
rm(growthCPI, pick_105cpi)
dataProcessing = {
dataExtract %>%
mutate(
年月日 = 年月 %>%
str_replace("M", "-") %>%
paste0("-01") %>%
lubridate::ymd(),
年增率百分比 = as.numeric(年增率)
)
}
library(readr)
library(dplyr)
library(stringr)
library(lubridate)
library(ggplot2)
library(svglite)
knitr::opts_chunk$set(echo = TRUE, eval=F)
library(rmd2drake)
library(drake)
# If you use git and does not want to track cache folder, put down the following command:
set_gitignore("class2_1007_cache")
dataProcessing = {
dataExtract %>%
mutate(
年月日 = 年月 %>%
str_replace("M", "-") %>%
paste0("-01") %>%
lubridate::ymd(),
年增率百分比 = as.numeric(年增率)
)
}
View(dataProcessing)
baseCanvas = {
dataProcessing %>%
ggplot()
}
baseCanvas = {
dataProcessing %>%
ggplot()
}
baseCanvas
geom1_line = {
baseCanvas +
geom_line(
mapping = aes(
x = 年月日,
y = 年增率百分比
)
)
}
geom1_line
vis_plan_20201007_class2()
mk_plan_20201007_class2()
knitr::opts_chunk$set(echo = TRUE, eval=F)
library(rmd2drake)
library(drake)
# If you use git and does not want to track cache folder, put down the following command:
set_gitignore("class2_1007_cache")
baseCanvas = {
dataProcessing %>%
ggplot()
}
dataProcessing = {
dataExtract %>%
mutate(
年月日 = 年月 %>%
str_replace("M", "-") %>%
paste0("-01") %>%
lubridate::ymd(),
年增率百分比 = as.numeric(年增率)
)
}
rm(growthCPI, pick_105cpi)
dataExtract = {
library(purrr)
map(
dataImport_twcpi$DataSet,
~{
(.x$Item == "總指數(民國105年=100)") &
(.x$TYPE == "年增率(%)")
}
) %>%
unlist() ->    # change list to vector
pick_105cpi
head(pick_105cpi, 20)
growthCPI <- dataImport_twcpi$DataSet[pick_105cpi]
map_dfr(    # return a data frame created by row-binding
seq_along(growthCPI),
~{
data.frame(
項目 = growthCPI[[.x]]$Item[[1]],
年月 = growthCPI[[.x]]$TIME_PERIOD[[1]],
年增率 = growthCPI[[.x]]$Item_VALUE[[1]]
)
}
)
}
vis_plan_20201007_class2()
View(plan_20201007_class2)
View(dataExtract)
View(dataImport_twcpi)
rm(dataExtract)
rm(dataImport_twcpi)
geom1_line
mk_plan_20201007_class2()
mk_plan_20201007_class2()
vis_plan_20201007_class2()
geom1_line
geom1_line + theme_bw()
geom1_line +
theme_classic()
geom1_line +
theme_bw()
font_files()
sysfonts::font.files()
dir.create("20201014_basic4dp")
library(drake)
source('~/GitHub/course_datavisualization_1091/20201014_basic4dp/basic4dp.R', encoding = 'UTF-8')
make(examplePlan)
make(examplePlan)
new_cache("./20201014_basic4dp/basic4dp_cache")
make(
examplePlan,
cache = new_cache("./20201014_basic4dp/basic4dp_cache")
)
drake::new_cache()
storr::storr_rds()
drake_cache()
loadd(target1)
loadd(target1)
make(
examplePlan,
cache = new_cache("./20201014_basic4dp/basic4dp_cache")
)
loadd(target1)
loadd(target1, path = "./20201014_basic4dp")
make(examplePlan)
loadd(target1)
make(
examplePlan,
cache = new_cache("./20201014_basic4dp/basic4dp_cache")
)
loadd(target1)
loadd(target1, path = "basic4dp_cache")
loadd(target1, path = "20201014_basic4dp/basic4dp_cache")
loadd(target1, path = "./20201014_basic4dp/basic4dp_cache")
a <- 3
cc <- 15
# drake plan架構（名為examplePlan）
examplePlan <- drake::drake_plan(
target1 = {    # 每個target對應Rmd一個dp code chunk內容
a + 5 -> b
cc <- 0
if (b < 10) b
},
target2 = {
cc
},
target3 = {
target1 + a
}
)
make(
examplePlan,
cache = new_cache("./20201014_basic4dp/basic4dp_cache")
)
loadd(
target1, path = "./20201014_basic4dp/basic4dp_cache"
)
loadd(
target2, path = "./20201014_basic4dp/basic4dp_cache"
)
loadd(
target3, path = "./20201014_basic4dp/basic4dp_cache"
)
rm(target1, target2, target3)
root
root()
paste0(root(), file.path("20201014_basic4dp", "basic4dp_cache"))
file.path(root(), file.path("20201014_basic4dp", "basic4dp_cache"))
source('~/GitHub/course_datavisualization_1091/.Rprofile', encoding = 'UTF-8')
source('~/GitHub/course_datavisualization_1091/.Rprofile', encoding = 'UTF-8')
cacheDir <- file.path(
root(),
file.path("20201014_basic4dp", "basic4dp_cache")
)
make(
examplePlan,
cache = new_cache(cacheDir)
)
loadd(target1, path = cacheDir)
cacheDir <- file.path(
root(),
file.path("20201014_basic4dp", "basic4dp_cache")
)
drake::make(
examplePlan,
cache = new_cache(cacheDir)
)
drake::loadd(target1, path = cacheDir)
cacheDir <- file.path(
root(),
file.path("20201014_basic4dp", "basic4dp_cache")
)
drake::make(
examplePlan,
cache = new_cache(cacheDir)
)
source('~/GitHub/course_datavisualization_1091/20201014_basic4dp/basic4dp.R', encoding = 'UTF-8')
source('~/GitHub/course_datavisualization_1091/20201014_basic4dp/basic4dp.R', encoding = 'UTF-8')
rm(target1)
loadd(target1, path = cacheDir)
rm(a, cc)
vis_drake_graph()
vis_drake_graph(examplePlan)
vis_drake_graph(examplePlan)
vis_drake_graph()
make(
examplePlan,
cache = new_cache(cacheDir)
)
a <- 3
cc <- 15
make(
examplePlan,
cache = new_cache(cacheDir)
)
vis_drake_graph()
vis_drake_graph(examplePlan)
View(examplePlan)
loadd(target1, path = cacheDir)
make(examplePlan)
vis_drake_graph()
vis_drake_graph(examplePlan)
vis_drake_graph(examplePlan, cache = cacheDir)
tempfile()
drake_cache()
drake_cache(path = cacheDir)
drake_cache(path = "basic4dp_cache")
drake_cache(path = "basic4dp_cache")
drake_cache(path = cacheDir)
drake_cache(path = "20201014_basic4dp/basic4dp_cache")
drake_cache(path = "20201014_basic4dp/basic4dp_cache")$path
vis_drake_graph(plan, cache = drake_cache(path = cacheDir))
drake_cache(path = cacheDir)
cache <- drake_cache(path = cacheDir)
cache$driver$path
vis_drake_graph(plan, cache = cache)
vis_drake_graph(plan, cache = cache)
source('~/GitHub/course_datavisualization_1091/20201014_basic4dp/basic4dp.R', encoding = 'UTF-8')
source('~/GitHub/course_datavisualization_1091/.Rprofile', encoding = 'UTF-8')
# console流程
library(drake)
cacheDir <- file.path(
root(),
file.path("20201014_basic4dp", "basic4dp_cache")
)
# 建立dp，並自行建立dp cache
make(
examplePlan,
cache = new_cache(cacheDir)
)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))
clean()
clean()
make(
examplePlan,
cache = new_cache(cacheDir)
)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))
clean(path = cacheDir)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))
make(
examplePlan,
cache = new_cache(cacheDir)
)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))
# 若要使dp重新make一次，clean() -> make()
clean(path = cacheDir)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))    # target變黑色
make(
examplePlan,
cache = new_cache(cacheDir)
)
#
clean(target1, path = cacheDir)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))    # target1變黑色（outdated）
make(
examplePlan,
cache = new_cache(cacheDir)
)
vis_drake_graph(examplePlan, cache = drake_cache(cacheDir))
